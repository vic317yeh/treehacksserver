{
  "name": "watson-developer-cloud-alpha",
  "version": "0.10.5",
  "description": "Nodejs Client Alpha Wrapper to use the IBM Watson Services",
  "main": "./lib/index",
  "repository": {
    "type": "git",
    "url": "https://github.com/watson-developer-cloud/nodejs-wrapper-alpha.git"
  },
  "keywords": [
    "ibm",
    "watson",
    "wdc",
    "watson developer cloud",
    "message resonance",
    "user modeling",
    "machine translation",
    "concept expansion",
    "question and answer",
    "relationship extraction",
    "language identification",
    "visual recognition ",
    "speech to text ",
    "text to speech ",
    "concept insights ",
    "tradeoff analytics "
  ],
  "author": {
    "name": "IBM Corp."
  },
  "contributors": [
    {
      "name": "German Attanasio Ruiz",
      "email": "germanatt@us.ibm.com"
    },
    {
      "name": "Jeff Stylos",
      "email": "jsstylos@us.ibm.com"
    }
  ],
  "license": "Apache-2.0",
  "bugs": {
    "url": "https://github.com/watson-developer-cloud/nodejs-wrapper-alpha/issues"
  },
  "devDependencies": {
    "mocha": "~2.1.0",
    "coveralls": "~2.11.2",
    "istanbul": "~0.3.5",
    "nock": "~0.59.1",
    "qs": "~2.3.3"
  },
  "dependencies": {
    "async": "~0.9.0",
    "cookie": "~0.1.2",
    "extend": "~2.0.0",
    "isstream": "~0.1.1",
    "object.omit": "~0.2.1",
    "object.pick": "~1.1.1",
    "request": "~2.53.0",
    "string-template": "~0.2.0"
  },
  "engines": {
    "node": ">=0.10"
  },
  "scripts": {
    "test": "mocha --reporter spec --timeout 4000",
    "prepare": "npm test && npm version patch",
    "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha --reporter spec --timeout 4000",
    "coveralls": "istanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage"
  },
  "readme": "Watson Developer Cloud Nodejs Client - Alpha\n============================================\n\n[![Build Status](https://secure.travis-ci.org/watson-developer-cloud/nodejs-wrapper-alpha.png)](http://travis-ci.org/watson-developer-cloud/nodejs-wrapper-alpha)\n[![Dependency Status](https://gemnasium.com/watson-developer-cloud/nodejs-wrapper-alpha.png)](https://gemnasium.com/watson-developer-cloud/nodejs-wrapper-alpha)\n[![Coverage Status](https://img.shields.io/coveralls/watson-developer-cloud/nodejs-wrapper-alpha.svg)](https://coveralls.io/r/watson-developer-cloud/nodejs-wrapper-alpha)\n[![Join the chat at https://gitter.im/watson-developer-cloud/nodejs-wrapper-alpha](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/watson-developer-cloud/nodejs-wrapper-alpha?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nWrapper to use the [Watson Developer Cloud][wdc] services. A collection of REST APIs and SDKs that use cognitive computing to solve complex problems.\n\n## Table of Contents\n  * [Watson Developer Cloud Nodejs Client - Alpha](#watson-developer-cloud-nodejs-client---alpha)\n    * [Questions](#questions)\n    * [Installation](#installation)\n    * [Usage](#usage)\n    * [Getting the Service Credentials](#getting-the-service-credentials)\n    * IBM Watson Services\n      * [Question and Answer](#question-and-answer)\n      * [Visual Recognition](#visual-recognition)\n      * [Text to Speech](#text-to-speech)\n      * [Speech to Text](#speech-to-text)\n      * [Concept Insights](#concept-insights)\n      * [Message Resonance](#message-resonance)\n      * [Language Identification](#language-identification)\n      * [Machine Translation](#machine-translation)\n      * [Personality Insights](#personality-insights)\n      * [Relationship Extraction](#relationship-extraction)\n      * [Concept Expansion](#concept-expansion)\n    * [Running in Bluemix](#running-in-bluemix)\n    * [Debug](#debug)\n    * [Tests](#tests)\n    * [Open Source @ IBM](#open-source--ibm)\n    * [License](#license)\n    * [Contributing](#contributing)\n\n\n## Alpha\nThis is an **Alpha release** of the `watson-developer-cloud` [npm][npm_link] module. Features might be changed in backward-incompatible ways and is not recommended for production use.\n\n## Questions\n\nIf you are having difficulties using the APIs or have a question about the IBM Watson Services, please ask a question on [dW Answers](https://developer.ibm.com/answers/questions/ask/?topics=watson) or [Stack Overflow](http://stackoverflow.com/questions/ask?tags=ibm-watson).\n\n\n## Installation\n\n```sh\n$ npm install watson-developer-cloud-alpha --save\n```\n\n## Usage\n\nThe examples below assume you already have service credentials. If not, you will have to create and bind the service in [Bluemix][bluemix]. See the [Getting Started][getting_started] page for more details.\n\nIf you are running your application in Bluemix, you don't need to specify the credentials, the wrapper will get them for you by looking at the `VCAP_SERVICES`\n\n### Getting the Service Credentials\nThe credentials for the services are stored in the [VCAP_SERVICES][vcap_environment] environment variable. In order to get them you need to first create and bind the service to your application.\n\nThere are two ways to get the credentials, you can use Bluemix to access your app and view the `VCAP_SERVICES` there or you can run:\n\n```sh\n$ cf env <application-name>\n```\n\nExample output:\n```sh\n  System-Provided:\n  {\n  \"VCAP_SERVICES\": {\n    \"visual_recognition\": [{\n        \"credentials\": {\n          \"password\": \"<password>\",\n          \"url\": \"<url>\",\n          \"username\": \"<username>\"\n        },\n      \"label\": \"visual_recognition\",\n      \"name\": \"visual-recognition-service\",\n      \"plan\": \"free\"\n   }]\n  }\n  }\n```\n\nYou need to copy `username`, `password`.\n\n### Question and Answer\nExample: Ask a healthcare-related question to the [Question and Answer][question_and_answer] service.\n\n```js\nvar watson = require('watson-developer-cloud-alpha');\nvar question_and_answer_healthcare = watson.question_and_answer({\n  username: '<username>',\n  password: '<password>',\n  version: 'v1',\n  dataset: 'healthcare' /* The dataset can be specified when creating the service or when calling it */\n});\n\nquestion_and_answer_healthcare.ask({ text: 'What is HIV?'}, function (err, response) {\n  if (err)\n    console.log('error:', err);\n  else\n    console.log(JSON.stringify(response, null, 2));\n});\n```\n\n### Visual Recognition\nExample: Use the [Visual Recognition][visual_recognition] service to recognize the picture below.\n\n<img src=\"http://visual-recognition-demo.mybluemix.net/images/horses.jpg\" width=\"150\" height=\"150\" />\n\n```js\nvar watson = require('watson-developer-cloud-alpha');\nvar request = require('request');\n\nvar visual_recognition = watson.visual_recognition({\n  username: '<username>',\n  password: '<password>',\n  version: 'v1'\n});\n\nvar params = {\n  image_file: request('http://visual-recognition-demo.mybluemix.net/images/horses.jpg')\n};\nvisual_recognition.recognize(params, function(err, res) {\n  if (err)\n    console.log(err);\n  else\n    console.log(JSON.stringify(res, 'labels', 2));\n});\n```\n\n### Text to Speech\nExample: Use the [Text to Speech][text_to_speech] to synthesize text into a wav file.\n\n```js\nvar watson = require('watson-developer-cloud-alpha');\nvar fs = require('fs');\n\nvar text_to_speech = watson.text_to_speech({\n  username: '<username>',\n  password: '<password>',\n  version: 'v1'\n});\n\nvar params = {\n    text: 'Hello from IBM Watson',\n    voice: 'VoiceEnUsMichael', // optional voice\n    accept: 'audio/wav'\n};\n\n// pipe the synthesized text to a file\ntext_to_speech.synthesize(params).pipe(fs.createWriteStream('output.wav'));\n```\n\n### Speech to Text\nExample: Use the [Speech to Text][speech_to_text] to recognize the text from a wav file.\n\n```js\nvar watson = require('watson-developer-cloud-alpha');\nvar request = require('request');\n\nvar speech_to_text = watson.speech_to_text({\n  username: '<username>',\n  password: '<password>',\n  version: 'v1'\n});\n\nvar params = {\n  // From file\n  audio: request('http://speech-to-text-demo.mybluemix.net/audio/sample1.wav'),\n  content_type: 'audio/l16; rate=44100'\n};\n\nspeech_to_text.recognize(params, function(err, res) {\n  if (err)\n    console.log(err);\n  else\n    console.log(JSON.stringify(res, null, 2));\n});\n```\n\n### Concept Insights\nExample: Use the [Concept Insights][concept_insights] to identify words in the text that correspond to concepts in a Wikipedia graph.\n```js\nvar watson = require('watson-developer-cloud-alpha');\n\nvar concept_insights = watson.concept_insights({\n  username: '<username>',\n  password: '<password>',\n  version: 'v1'\n});\n\nvar params = {\n  user: 'wikipedia',\n  graph: 'en-20120601',\n  text: 'IBM Watson won the Jeopardy television show hosted by Alex Trebek'\n};\n\n// Retrieve the concepts for input text\nconcept_insights.annotateText(params, function(err, response) {\n  if (err)\n    console.log(err);\n  else\n    console.log(JSON.stringify(response, null, 2));\n});\n```\n\n### Message Resonance\nExample: Get resonance information for individual words in a sentence from the [Message Resonance][message_resonance] service.\n\n```js\nvar watson = require('watson-developer-cloud-alpha');\nvar message_resonance = watson.message_resonance({\n\tusername:'<username>',\n\tpassword:'<password>',\n\tversion:'v1'\n});\n\nmessage_resonance.resonance({ text: 'IBM Watson Developer Cloud', dataset: 1 }, function(err, response) {\n  if (err)\n    console.log('error:', err);\n  else\n    console.log(JSON.stringify(response, null, 2));\n});\n```\n\n### Language Identification\nExample: Identify a language using the [Language Identification][language_identification] service.\n\n```javascript\nvar watson = require('watson-developer-cloud-alpha');\n\nvar language_identification = watson.language_identification({\n  username: '<username>',\n  password: '<password>',\n  version: 'v1'\n});\n\nlanguage_identification.identify({\n  text: 'The language identification service takes text input and identifies the language used.' }, function (err, response) {\n    if (err)\n      console.log('error:', err);\n    else\n      console.log(JSON.stringify(response, null, 2));\n});\n```\n\n### Machine Translation\nExample: Translate text from one language to another using the [Machine Translation][machine_translation] service.\n\n```javascript\nvar watson = require('watson-developer-cloud-alpha');\n\nvar machine_translation = watson.machine_translation({\n  username: '<username>',\n  password: '<password>',\n  version: 'v1'\n});\n\nmachine_translation.translate({\n  text: 'A sentence must have a verb', from : 'enus', to: 'eses' },\n  function (err, response) {\n    if (err)\n      console.log('error:', err);\n    else\n      console.log(JSON.stringify(response, null, 2));\n});\n```\n\n### Personality Insights\nExample: Analyze text and get a personality profile using the [Personality Insights][personality_insights] service.\n\n```javascript\nvar watson = require('watson-developer-cloud-alpha');\n\nvar personality_insights = watson.personality_insights({\n  username: '<username>',\n  password: '<password>',\n  version: 'v2'\n});\n\npersonality_insights.profile({\n  text: 'type more than 100 unique words here...' },\n  function (err, response) {\n    if (err)\n      console.log('error:', err);\n    else\n      console.log(JSON.stringify(response, null, 2));\n});\n```\n**Node:** Don't forget to update the `text` variable!\n\n### Relationship Extraction\nExample: Analyze an English news article and get the relationships between sentence components (nouns, verbs, subjects, objects, etc.) using the [Relationship Extraction][relationship_extraction] service.\n\n```javascript\nvar watson = require('watson-developer-cloud-alpha');\n\nvar relationship_extraction = watson.relationship_extraction({\n  username: '<username>',\n  password: '<password>',\n  version: 'v1'\n});\n\nrelationship_extraction.extract({\n  text: 'IBM Watson developer cloud', dataset: 'ie-en-news' },\n  function (err, response) {\n    if (err)\n      console.log('error:', err);\n    else\n      console.log(JSON.stringify(response, null, 2));\n});\n```\n\n### Concept Expansion\nExample: Map euphemisms or colloquial terms to more commonly understood phrases using the [Concept Expansion][concept_expansion] service.\n\n```javascript\nvar watson = require('watson-developer-cloud-alpha');\n\nvar concept_expansion = watson.concept_expansion({\n  username: '<username>',\n  password: '<password>',\n  version: 'v1'\n});\nvar params = {\n  seeds: ['motrin','tylenol','aspirin'],\n  dataset: 'mtsamples',\n  label: 'medications'\n};\nconcept_expansion.expand(params, function (err, response) {\n    if (err)\n      console.log('error:', err);\n    else\n      console.log(JSON.stringify(response, null, 2));\n});\n```\n\n## Running in Bluemix\nBy default the wrapper will try to use the Bluemix `VCAP_SERVICES` to get the credentials for a given service. You can avoid this by using: `use_vcap_services`.\n\n```javascript\nvar watson = require('watson-developer-cloud-alpha');\n\nvar concept_expansion = watson.concept_expansion({\n  version: 'v1',\n  use_vcap_services: false\n});\n```\nThe example above will fail because you did not provide a username and password and the wrapper will not look into Bluemix for those values.\n\n## Debug\nThis wrapper relies in the `request` npm module writted by [mikeal][mikeal_github] to call the Watson Services. In order to debug add 'request' to the `NODE_DEBUG`:\n\n```sh\n$ NODE_DEBUG='request' app.js\n```\nwhere `app.js` is your nodejs file\n\n## Tests\nRunning all the tests:\n```sh\n$ npm test\n```\n\nRunning a specific test:\n```sh\n$ mocha -g '<test name>'\n```\n\n## Open Source @ IBM\n[Find more open source projects on the IBM Github Page](http://ibm.github.io/)\n\n## License\n\nThis library is licensed under Apache 2.0. Full license text is\navailable in [COPYING](https://github.com/watson-developer-cloud/nodejs-wrapper-alpha/blob/master/LICENSE).\n\n## Contributing\nSee [CONTRIBUTING](https://github.com/watson-developer-cloud/nodejs-wrapper-alpha/blob/master/CONTRIBUTING.md).\n\n\n[question_and_answer]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/qaapi/\n[message_resonance]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/mrapi/\n[personality_insights]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/personality-insights/\n[language_identification]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/lidapi/\n[machine_translation]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/mtapi/\n[concept_expansion]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/glimpseapi/\n[relationship_extraction]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/sireapi/\n[visual_recognition]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/visual-recognition/\n[text_to_speech]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/text-to-speech/\n[speech_to_text]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/speech-to-text/\n[concept_insights]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/concept-insights/\n\n[getting_started]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/getstarted.html\n[wdc]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/\n[vcap_environment]: http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/doc/getting_started/index.html#EnvVars\n[bluemix]: https://console.ng.bluemix.net\n[npm_link]: https://www.npmjs.com/package/watson-developer-cloud-alpha\n[mikeal_github]: https://github.com/request/request\n",
  "readmeFilename": "README.md",
  "_id": "watson-developer-cloud-alpha@0.10.5",
  "dist": {
    "shasum": "4a941737ae7c5d7fdc9adea81685fe43a0a3e504"
  },
  "_from": "watson-developer-cloud-alpha@",
  "_resolved": "https://registry.npmjs.org/watson-developer-cloud-alpha/-/watson-developer-cloud-alpha-0.10.5.tgz"
}
